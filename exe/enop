#!/usr/bin/env ruby

require 'arxutils_sqlite3'
require 'enop'
require 'simpleoptparse'
require 'pstore'

env = ENV['ENV']
#env ||= "development"
env ||= "production"

opts = { db_dir: Arxutils_Sqlite3::Dbutil::DB_DIR }
banner = "Usage: bundle exec ruby exe/enop token url"

if ARGV.size > 1
  token = ARGV.shift
  url = ARGV.shift
else
  puts banner
  exit 10
end

Simpleoptparse::Simpleoptparse.parse( ARGV , opts , banner , Enop::VERSION , nil ){ |parser|
    parser.on('--mysql'  ) { |x| opts["dbconfig"] = Arxutils_Sqlite3::Dbutil::DBCONFIG_MYSQL }
    parser.on('--sqlite3'  ) { |x| opts["dbconfig"] = Arxutils_Sqlite3::Dbutil::DBCONFIG_SQLITE3 }
}

opts["dbconfig"] = Arxutils_Sqlite3::Dbutil::DBCONFIG_SQLITE3 unless opts["dbconfig"]

hs = {
  "db_dir" => Arxutils_Sqlite3::Dbutil::DB_DIR,
  "migrate_dir" => Arxutils_Sqlite3::Dbutil::MIGRATE_DIR,
  "config_dir" => Arxutils_Sqlite3::Dbutil::CONFIG_DIR,
  "dbconfig" => opts["dbconfig"],
  "env" => env,
  "log_fname" => Arxutils_Sqlite3::Dbutil::DATABASELOG,
  :csv_fname => "x.csv",
  "output_dir" => "output"
}


enop = Enop::Enop.new(
                      token,
                      hs,
                      opts,
                      url,
                      )
enop.connect
#enop.list_notebooks
#enop.list_notebooks(true)
#enop.getLatest100Notes
#enop.getx
#enop.getx_2

#enop.gety
#enop.getz
#enop.geta
#enop.get_notes_having_pdf
#p enop.notebooks_hs_backup.size
#enop.get_notes_having_pdf
#enop.get_notes_having_pdf(true)
#p enop.notebooks_hs_notelist_backup.size
#p enop.notebooks_hs_notelist_backup
#enop.list_note_having_pdf(true)
#enop.list_note_having_pdf
#enop.x
#enop.list_notebooks(true)
enop.list_notebooks_having_pdf(true)
